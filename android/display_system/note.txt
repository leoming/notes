源码目录结构
├── Android.bp -> build/soong/root.bp
├── art  二进制兼容性检查
├── bionic  Bionic C库实现代码
├── bootable  启动引导程序源码，包含bootloader, diskinstall 和 recovery
├── bootstrap.bash -> build/soong/bootstrap.bash
├── build  编译系统，包含各种make和shell脚本
├── compatibility
├── cts  兼容性检测源码,Android手机如果需要Google认证，就需要通过Google的兼容性检测，目的是确保该手机系统具备标准的SDK API接口
├── dalvik  Dalvik虚拟机源码
├── developers
├── development  Android开发所使用的一些配置文件
├── device  不同厂商设备相关的编译脚本，包含三星，摩托罗拉等
├── docs  source.android.com文档
├── external  Android依赖的扩展库，包括bluetooth,skia,sqlite,webkit,wpa_supplicant等功能库和一些工具，如oprofile用于JNI层的性能调试。系统运行库层大部分代码位于这里
├── frameworks  框架层源码，应用框架层位于这里
├── hardware  硬件抽象层相关源码
├── kernel  linux内核
├── libcore  核心java库。
├── libnativehelper  NDK开发环境相关源码
├── Makefile
├── packages  包含各种内置应用程序，内容提供器，输入法等。应用层开发主要集中在这部分
├── pdk
├── platform_testing
├── prebuilts  编译所需的程序文件，主要包含不同平台下的ARM编译器
├── sdk  编译SDK工具所需的文件，包含hierarchyviewer,eclipse插件,emulator,traceview等主要工具
├── system  Linux所需的一些系统工具程序，比如adb,debuggerd,fastboot,logcat等
├── test
├── toolchain
└── tools
应用层源码位于packages目录下，主要包含核心应用程序、内容提供器（provider）、输入法等；应用程序框架层源码位于frameworks目录下；系统运行库分布于bionic、external等目录下；Android核心库位于libcore目录下；dalvik是Android虚拟机的源码目录；其他目录主要是编译和开发工具的源码目录。

框架基础 JNI
应用层：NDK开发
应用框架层：Android定义了一套JNI编程模型，使用函数注册方式弥补了标准JNI编程模型的不足。位于frameworks/base/下，编译结果放在/sysem/lib
JNI编程模型结构：
1.Java层声明Native方法。
2.JNI层实现Java层声明的方法，在JNI层可以调用底层库或者回调Java层方法。这部分将被编译成共享库供系统加载。
3.加载JNI层代码编译后生成的共享库。

JNI框架实例分析（Log系统)
涉及文件
frameworks/base/core/jni/android_util_Log.cpp (JNI层实现代码)
frameworks/base/core/jni/android_util_Log.h
frameworks/base/core/jni/AndroidRuntime.cpp
frameworks/base/core/java/android/Log.java (java层代码)
libnativehelper/include/nativehelper/jni.h (JNI规范的头文件)
libnativehelper/include/nativehelper/JNIHelper.h
libnativehelper/JNIHelp.cpp
Log.java中定义的native方法，java层自需要声明native无需实现
    public static native boolean isLoggable(String tag, int level);
    public static native int println_native(int bufID,
            int priority, String tag, String msg);
    private static native int logger_entry_max_payload_native();

Log系统的JNI层
JNI层是实现Java层方法最关键部分。
#include "jni.h"  //符合JNI规范的头文件，必须包含进来
#include "JNIHelper.h"  //Android为更好的支持JNI提供的头文件
#include "core_jni_helpers.h"  //对JNIHelper和AndroidRuntime的封装
system/core/liblog
JNI方法增加了JNIEnv和jobject两个参数，其余参数和返回值只是讲Java参数映射成JNI的数据类型，让后通过调用本地库(liblog)和JNIEnv提供的JNI函数处理数据，最后返回给Java层
static jboolean android_util_Log_isLoggable(JNIEnv* env, jobject clazz, jstring tag, jint level)
{
    if (tag == NULL) {
        return false;
    }
    //调用JNI函数，转换参数
    const char* chars = env->GetStringUTFChars(tag, NULL);
    if (!chars) {
        return false;
    }

    jboolean result = false;
    if ((strlen(chars)+sizeof(LOG_NAMESPACE)) > PROPERTY_KEY_MAX) {
        char buf2[200];
        snprintf(buf2, sizeof(buf2), "Log tag \"%s\" exceeds limit of %zu characters\n",
                chars, PROPERTY_KEY_MAX - sizeof(LOG_NAMESPACE));

        jniThrowException(env, "java/lang/IllegalArgumentException", buf2);
    } else {
        //jint不需要转换
        result = isLoggable(chars, level);
    }
    //调用JNI函数释放资源
    env->ReleaseStringUTFChars(tag, chars);
    return result;
}

static jint android_util_Log_println_native(JNIEnv* env, jobject clazz,
        jint bufID, jint priority, jstring tagObj, jstring msgObj)
{
    const char* tag = NULL;
    const char* msg = NULL;

    if (msgObj == NULL) {
        jniThrowNullPointerException(env, "println needs a message");
        return -1;
    }

    if (bufID < 0 || bufID >= LOG_ID_MAX) {
        jniThrowNullPointerException(env, "bad bufID");
        return -1;
    }

    if (tagObj != NULL)
        tag = env->GetStringUTFChars(tagObj, NULL);
    msg = env->GetStringUTFChars(msgObj, NULL);

    int res = __android_log_buf_write(bufID, (android_LogPriority)priority, tag, msg);

    if (tag != NULL)
        env->ReleaseStringUTFChars(tagObj, tag);
    env->ReleaseStringUTFChars(msgObj, msg);

    return res;
}

Log系统的JNI方法注册
//JNINativeMethod定义
typedef struct {
    const char* name;
    const char* signature;
    void*       fnPtr;
} JNINativeMethod;
//声明java和jni函数关联数组
static const JNINativeMethod gMethods[] = {
    /* name, signature, funcPtr */
    { "isLoggable",      "(Ljava/lang/String;I)Z", (void*) android_util_Log_isLoggable },
    { "println_native",  "(IILjava/lang/String;Ljava/lang/String;)I", (void*) android_util_Log_println_native },
    { "logger_entry_max_payload_native",  "()I", (void*) android_util_Log_logger_entry_max_payload_native },
};
JNINativeMethod中存储的信息对应关系
{ "isLoggable",      "(Ljava/lang/String;I)Z", (void*) android_util_Log_isLoggable }
Java层声明的Native函数名为isLoggable
Java层声明的Native函数的签名为(Ljava/lang/String;I)Z
JNI层实现方法的指针为(void*) android_util_Log_isLoggable
//注册  在AndroidRuntime::register_jni_procs中完成注册，先将register_android_util_Log加入gRegJNI[]函数指针数组，再循环调用注册
int register_android_util_Log(JNIEnv* env)
{
    jclass clazz = FindClassOrDie(env, "android/util/Log");

    levels.verbose = env->GetStaticIntField(clazz, GetStaticFieldIDOrDie(env, clazz, "VERBOSE", "I"));
    levels.debug = env->GetStaticIntField(clazz, GetStaticFieldIDOrDie(env, clazz, "DEBUG", "I"));
    levels.info = env->GetStaticIntField(clazz, GetStaticFieldIDOrDie(env, clazz, "INFO", "I"));
    levels.warn = env->GetStaticIntField(clazz, GetStaticFieldIDOrDie(env, clazz, "WARN", "I"));
    levels.error = env->GetStaticIntField(clazz, GetStaticFieldIDOrDie(env, clazz, "ERROR", "I"));
    levels.assert = env->GetStaticIntField(clazz, GetStaticFieldIDOrDie(env, clazz, "ASSERT", "I"));

    return RegisterMethodsOrDie(env, "android/util/Log", gMethods, NELEM(gMethods));
}
//core_jni_helpers.h
static inline int RegisterMethodsOrDie(JNIEnv* env, const char* className,
                                       const JNINativeMethod* gMethods, int numMethods) {
    int res = AndroidRuntime::registerNativeMethods(env, className, gMethods, numMethods);
    LOG_ALWAYS_FATAL_IF(res < 0, "Unable to register native methods.");
    return res;
}
//AndroidRuntime.cpp
/*static*/ int AndroidRuntime::registerNativeMethods(JNIEnv* env,
    const char* className, const JNINativeMethod* gMethods, int numMethods)
{
    return jniRegisterNativeMethods(env, className, gMethods, numMethods);
}
//JNIHelper.cpp
extern "C" int jniRegisterNativeMethods(C_JNIEnv* env, const char* className,
    const JNINativeMethod* gMethods, int numMethods)
{
    JNIEnv* e = reinterpret_cast<JNIEnv*>(env);

    ALOGV("Registering %s's %d native methods...", className, numMethods);
    //找到Log类
    scoped_local_ref<jclass> c(env, findClass(env, className));
    if (c.get() == NULL) {
        ...
    }
    // 调用env完成注册本地方法，虚拟机就得到了Java层和JNI层之间的对应关系，接可以实现Java和C/C++代码的互操作
    if ((*env)->RegisterNatives(e, c.get(), gMethods, numMethods) < 0) {
        ...
    }

    return 0;
}
使用JNI有两种方式：一种是遵守JNI规范的函数命名规范，建立声明函数和实现函数之间的对应关系；另一种就是Log系统采用的函数注册方式。应用层多采用第一种方式，应用框架层多采用第二种方式。

Java数据类型与JNI数据类型转换
基本类型
boolean byte char short int long float double 前面都加j
void 还是void
引用类型
java.lang.Class    jclass
java.lang.String    jstring
java.lang.Throwable    jthrowable
java.lang.Object    jobject
Object[]      boolean[]      byte[] char[] short[] int[] long[] float[] double[]
jobjectArray  jbooleanArray  ......

JNI方法命名规则
JNI方法第一个参数是JNIEnv指针，第二个参数因本地方法是静态还是非静态而有所不同。非静态本地方法的第二个参数是对Java对象的引用，而静态本地方法是对其Java类的引用。其余参数对应Java方法的参数按类型映射。
JNI方法签名规则
(参数1类型签名参数2类型签名...)返回值类型签名
以上签名字符串之间均没有空格
Java类型    类型签名(必须大写字母)
boolean      Z
byte         B
char         C
double       D
float        F
int          I
long         J
short        S
类           L全限定类名;
数组         [元素类型签名
java 方法：
long func(int n, String str, int[] arr);
(ILjava/lang/String;[I)J

Jni访问Java对象
JNI方法接受的第二个参数是Java对象：jobject，可以在JNI中操作这个jobject进而操作Java对象提供的变量和方法
JNI方法提供的常用操作对象函数：
jclass FindClass(const char* name);
jclass GetObjectClass(jobject obj);
JNI操作域和方法的函数 //jni.h
访问对象的域                 调用实例方法
GetFieldID                   GetMethodID
Get(Byte|Char|...)Field      Call(Byte|...)Method
Set<Type>Field               CallNonvirtual<Type>Method
访问静态域                   调用静态方法
GetStaticFieldID             GetStaticMethodID
GetStatid<Type>Field         CallStatic<Type>Method
SetStatic<Type>Field

JNI中的全局引用、弱全局引用和局部引用
全局引用，可增加引用计数。作用范围为多线程，多个Native方法，生命周期到显示释放。不释放不回收，对于全局引用默认不能超过2000个，如果在Dalvik启动参数dalvik.vm.checkjni中打开checkjni选项，Dalvik讲监控全局变量引用数量，超过2000个会看到"GREF overflow".
    jobject NewGlobalRef(jobject obj)
    void DeleteGlobalRef(jobject globalRef)
弱全局引用，不增加引用计数。作用范围为多线程，多个Native方法，生命周期到显示释放。优点是：既可保存对象，又不会应该虚拟机对该对象的回收。使用时需要用IsSameObject判断该对象是否被回收。
if (env->IsSameObject(weak_gref, NULL) == JNI_TRUE)
    // 该对象已被回收
    jweak NewWeakGlobalRef(jobject obj)
    void DeleteWeakGlobalRef(jweak obj)
    jboolean IsSameObject(jobject ref1, jobject ref2)
局部引用，可以增加引用计数，作用范围为本线程，生命周期为一次Native调用。
    void DeleteLocalRef(jobject localRef)
    jobject NewLocalRef(jobject ref)

JNI异常处理
其处理机制与Java和C++都不一样。JNI提供了两种检查异常的方法：
1.检查上一次JNI函数调用的返回值是否为NULL。
2.通过调用JNI函数ExceptionOccurred()来判断是否发生异常。
处理异常的方法：
1.Native方法可以选择立即返回。这样异常就会在调用该Native方法的Java代码中抛出。所以在Java代码中必须有捕获相应异常的代码，否则程序直接退出。
2.Native方法可以调用ExceptionClear()来清除异常，然后执行自己的异常处理代码。
JNI提供的检查和处理异常的函数如下：
Throw  抛出现有异常
ThrowNew  抛出新的异常
ExceptionOccurred  判断是否发生异常并获得异常的引用
ExceptionCheck  判断是否发生异常
ExceptionDescribe  异常堆栈信息
ExceptionClear  清除一个未处理的异常
FatalError  严重错误，退出
异常出现后，Native代码必须先检查清除异常，然后才能进行其他JNI函数调用。当有异常未被清除时，只有以下JNI异常处理函数可被安全的调用：
ExceptionOccurred  判断是否发生异常并获得异常的引用
ExceptionCheck  判断是否发生异常
ExceptionDescribe  异常堆栈信息
ExceptionClear  清除一个未处理的异常

extern "C" int jniThrowException(C_JNIEnv* env, const char* className, const char* msg) {
    JNIEnv* e = reinterpret_cast<JNIEnv*>(env);
    //抛出异常前先检查是否有异常未被处理，如果有先释放掉
    if ((*env)->ExceptionCheck(e)) {
        /* TODO: consider creating the new exception with this as "cause" */
        scoped_local_ref<jthrowable> exception(env, (*env)->ExceptionOccurred(e));
        (*env)->ExceptionClear(e);

        if (exception.get() != NULL) {
            std::string text;
            getExceptionSummary(env, exception.get(), text);
            ALOGW("Discarding pending exception (%s) to throw %s", text.c_str(), className);
        }
    }

    scoped_local_ref<jclass> exceptionClass(env, findClass(env, className));
    if (exceptionClass.get() == NULL) {
        ALOGE("Unable to find exception class %s", className);
        /* ClassNotFoundException now pending */
        return -1;
    }
    //然后再抛出新异常
    if ((*env)->ThrowNew(e, exceptionClass.get(), msg) != JNI_OK) {
        ALOGE("Failed throwing '%s' '%s'", className, msg);
        /* an exception, most likely OOM, will now be pending */
        return -1;
    }

    return 0;
}

Android 启动过程
步骤1 系统加电，加载并执行bootloader,bootloader加载内核到内存
步骤2 首先进入内核引导阶段，引导阶段最后调用start_kernel进入内核启动阶段，start_kernel最终启动用户空间init进程
步骤3 init程序负责解析init.rc配置文件，开启系统守护进程。最重要的两个守护进程是zygote和ServiceManager。前者是Android启动的第一个Dalvik虚拟机，它负责启动Java世界的程序，后者是Binder通信基础。
步骤4 zygote虚拟机启动子进程system_server，在system_server中开启Android核心系统服务并将核心系统服务添加到ServiceManager，然后系统进入systemReady状态。
步骤5 在systemReady状态下，ActivityManagerService与zygote中的Socket通信，通过zygote启动Home应用，进入系统桌面。

1,2,3 Linux相关，主要代码：
kernel/arch/arm/kernel/head.S
kernel/arch/arm/kernel/head-common.S
kernel/init/main.c
rest_init函数启动init进程。
	local_irq_disable(); //关闭当前CPU中断
	early_boot_irqs_disabled = true;
	page_address_init(); //页地址初始化
	pr_notice("%s", linux_banner); //输出内核版本信息
	setup_arch(&command_line); //体系结构相关的初始化
	sched_init(); //初始化进程调度器
	preempt_disable(); //禁止抢占
	early_irq_init(); // 初始化中断处理函数
	init_timers(); //初始化定时器
	hrtimers_init(); //初始化高精度时钟
	softirq_init(); //初始化软中断
	time_init(); //初始化系统时间
	profile_init(); //初始化内核性能调试工具profile
	early_boot_irqs_disabled = false;
	local_irq_enable(); //打开IRQ中断
	console_init(); //初始化控制台显示printk打印的内容
	fork_init(totalram_pages); //计算允许创建进程的数量
	signals_init(); //初始化信号量
	ftrace_init();
	rest_init(); //创建init进程
init main函数分析
1. 初始化文件系统和日志系统
2. 解析init.rc和init.hardware.rc初始化文件
3. 触发需要执行的Action和Service
4. init循环监听处理事件。init触发所有Action后，进入无限循环，执行可执行队列中的命令，重启异常退出的Service，并循环处理来自service,signal和keychord事件。
/init.rc /proc/cmdline /dev/kmsg
init.rc由Android初始化语言定义(文档/system/core/init/readme.txt，关键字定义/system/core/init/keyword.h)
六个基本概念：Section、Action、Service、Trigger、Command、Option
Section: Action-Trigger-Command,Service-Option->Commands
两个基本关键字：on->定义Action(当Action的条件满足时Trigger，执行Commands）、service->定义Service(定义一些Options和Commands，比如崩溃重启Option，并重启其他系统服务Command)
多个指令关键字(定义在Trigger,Command,Option中)
关键字on用来声明一个Action
关键字service用来声明一个Service
Action例子(Trigger)：
action_for_each_trigger("early-init", action_add_queue_tail);// 触发 early-init Action
on boot | service-exited-AAAService
    mkdir aaa #Command
service servicemanager /system/bin/servicemanager
    class core #Options
    user system
    group system
    critical
    onrestart restart zygote
    ...
on boot
    class_start core
    class_start servicemanager

zygote的启动
init.rc中zygote的配置
service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
    class main
    ...
app_process用来启动Java程序，zygote是Java写的服务不能通过init fork启动，app_process启动zygote特殊处理
     if (zygote) {
         runtime.start("com.android.internal.os.ZygoteInit", args, zygote);
     } else if (className) {
         runtime.start("com.android.internal.os.RuntimeInit", args, zygote);
     }

frameworks/base/core/jni/AndroidRuntime.cpp
frameworks/base/cmds/app_process/app_process.cpp
frameworks/base/java/com/android/internal/os/ZygoteInit.java
AndroidRuntime::start(...)->startVM(...)->JNI_CreateJavaVM(...) 启动虚拟机
                           \startReg(...)  注册JNI方法
                           \调用Java代码ZygoteInit::main(...) 方法

ZygoteInit::main主要做了五部分工作：
frameworks/base/core/java/com/android/internal/os/ZygoteInit.java 
1. 注册zygote的Socket
2. 预加载Class和Resource资源
3. 启动system_server进程
4. 执行MethordAndArgsCaller::run(),该方法将执行SystemService的main方法
5. 执行runSelectLoop方法
启动system_server: 
ZygoteInit::main()->startSystemServer()->Zygote.forkSystemServer(...)
//startSystemServer->args[]->com.android.server.SystemServer
dalvik/vm/native/dalvik_system_Zygote.cpp
system_server负责构建NativeSystemService和JavaSystemService，如果启动失败，整个Java世界也无从谈起，所以必须重启zygote。
在sigchldHandler中会监听systemServer退出信号
         if (pid == 0) {
             if (hasSecondZygote(abiList)) {
                 waitForSecondaryZygote(socketName);
             }
 
             handleSystemServerProcess(parsedArgs);
         }
fork之后，子进程中调用handleSystemServerProcess方法，先进行一些清理和初始化工作，然后调用RuntimeInit.zygoteInit()
frameworks/base/core/java/com/android/internal/os/RuntimeInit.java
    public static final void zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)
            throws ZygoteInit.MethodAndArgsCaller {
        if (DEBUG) Slog.d(TAG, "RuntimeInit: Starting application from zygote");

        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, "RuntimeInit");
        redirectLogStreams(); //重定向Java的标准I/O操作到Android日志系统
        commonInit(); //初始化一些通用操作 timezone log network 模拟器trace调试
        nativeZygoteInit(); // 开启Binder通信通道
        applicationInit(targetSdkVersion, argv, classLoader); //调用invokeStaticMain 抛出throw new ZygoteInit.MethodAndArgsCaller(m, argv);
    } 
回到 ZygoteInit::main中
catch (MethodAndArgsCaller caller) {
            caller.run();
        }
通过Java反射机制调用SystemService::main方法，通过抛异常的方式可以直接从调用栈中跳出，返回到ZygoteInit的main方法中

frameworks/base/services/java/com/android/server/SystemServer.java
frameworks/base/services/core/jni/com_android_server_SystemServer.cpp
SystemServer::main
申请更多内存，加载android_servers库，startService(bootstrap,core,other)，通过SystemServiceManager管理

SystemServer启动后ZygoteInit::main()执行到runSelectLoop(),进入无限循环，监听客户端的连接请求，如果有请求，便调用runOnce处理。

Home启动分析






















